// Generated by Dagger (https://google.github.io/dagger).
package com.byoutline.kickmaterial.dagger;

import com.byoutline.kickmaterial.api.KickMaterialService;
import com.byoutline.kickmaterial.model.ProjectDetails;
import com.byoutline.kickmaterial.model.ProjectIdAndSignature;
import com.byoutline.observablecachedfield.ObservableCachedFieldWithArg;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideProjectDetailsFactory
    implements Factory<ObservableCachedFieldWithArg<ProjectDetails, ProjectIdAndSignature>> {
  private final AppModule module;

  private final Provider<KickMaterialService> serviceProvider;

  public AppModule_ProvideProjectDetailsFactory(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public ObservableCachedFieldWithArg<ProjectDetails, ProjectIdAndSignature> get() {
    return provideInstance(module, serviceProvider);
  }

  public static ObservableCachedFieldWithArg<ProjectDetails, ProjectIdAndSignature> provideInstance(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    return proxyProvideProjectDetails(module, serviceProvider.get());
  }

  public static AppModule_ProvideProjectDetailsFactory create(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    return new AppModule_ProvideProjectDetailsFactory(module, serviceProvider);
  }

  public static ObservableCachedFieldWithArg<ProjectDetails, ProjectIdAndSignature>
      proxyProvideProjectDetails(AppModule instance, KickMaterialService service) {
    return Preconditions.checkNotNull(
        instance.provideProjectDetails(service),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
