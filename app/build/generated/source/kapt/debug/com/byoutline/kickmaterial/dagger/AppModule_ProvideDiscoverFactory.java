// Generated by Dagger (https://google.github.io/dagger).
package com.byoutline.kickmaterial.dagger;

import com.byoutline.kickmaterial.api.KickMaterialService;
import com.byoutline.kickmaterial.model.DiscoverQuery;
import com.byoutline.kickmaterial.model.DiscoverResponse;
import com.byoutline.observablecachedfield.ObservableCachedFieldWithArg;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDiscoverFactory
    implements Factory<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>> {
  private final AppModule module;

  private final Provider<KickMaterialService> serviceProvider;

  public AppModule_ProvideDiscoverFactory(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery> get() {
    return provideInstance(module, serviceProvider);
  }

  public static ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery> provideInstance(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    return proxyProvideDiscover(module, serviceProvider.get());
  }

  public static AppModule_ProvideDiscoverFactory create(
      AppModule module, Provider<KickMaterialService> serviceProvider) {
    return new AppModule_ProvideDiscoverFactory(module, serviceProvider);
  }

  public static ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery> proxyProvideDiscover(
      AppModule instance, KickMaterialService service) {
    return Preconditions.checkNotNull(
        instance.provideDiscover(service),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
