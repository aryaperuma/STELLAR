// Generated by Dagger (https://google.github.io/dagger).
package com.byoutline.kickmaterial.dagger;

import android.app.Activity;
import android.arch.lifecycle.ViewModel;
import android.arch.lifecycle.ViewModelProvider;
import android.content.SharedPreferences;
import android.support.v4.app.Fragment;
import com.byoutline.kickmaterial.KickMaterialApp;
import com.byoutline.kickmaterial.api.KickMaterialRequestInterceptor;
import com.byoutline.kickmaterial.api.KickMaterialRequestInterceptor_Factory;
import com.byoutline.kickmaterial.api.KickMaterialService;
import com.byoutline.kickmaterial.features.projectdetails.ProjectDetailsActivity;
import com.byoutline.kickmaterial.features.projectdetails.ProjectDetailsActivity_MembersInjector;
import com.byoutline.kickmaterial.features.projectdetails.ProjectDetailsTransitionHelperFactory;
import com.byoutline.kickmaterial.features.projectdetails.ProjectDetailsTransitionHelperFactory_Factory;
import com.byoutline.kickmaterial.features.projectlist.MainActivity;
import com.byoutline.kickmaterial.features.projectlist.MainActivity_MembersInjector;
import com.byoutline.kickmaterial.features.projectlist.ProjectListViewModel;
import com.byoutline.kickmaterial.features.projectlist.ProjectsListFragment;
import com.byoutline.kickmaterial.features.rewardlist.RewardListViewModel;
import com.byoutline.kickmaterial.features.rewardlist.RewardsListActivity;
import com.byoutline.kickmaterial.features.search.SearchListFragment;
import com.byoutline.kickmaterial.features.search.SearchViewModel;
import com.byoutline.kickmaterial.features.selectcategory.CategoriesListActivity;
import com.byoutline.kickmaterial.features.selectcategory.CategoriesListViewModel;
import com.byoutline.kickmaterial.model.DiscoverQuery;
import com.byoutline.kickmaterial.model.DiscoverResponse;
import com.byoutline.kickmaterial.model.ProjectDetails;
import com.byoutline.kickmaterial.model.ProjectIdAndSignature;
import com.byoutline.observablecachedfield.ObservableCachedFieldWithArg;
import com.byoutline.secretsauce.di.ActivityInjectorApp_MembersInjector;
import com.byoutline.secretsauce.di.ViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private Provider<MainActivityModule_MainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent.Builder>
      projectDetailsActivitySubcomponentBuilderProvider;

  private Provider<MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent.Builder>
      rewardsListActivitySubcomponentBuilderProvider;

  private Provider<
          MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent.Builder>
      categoriesListActivitySubcomponentBuilderProvider;

  private Provider<SharedPreferences> provideSharedPrefsProvider;

  private Provider<KickMaterialRequestInterceptor> kickMaterialRequestInterceptorProvider;

  private AppModule_ProvidesGson$app_debugFactory providesGson$app_debugProvider;

  private Provider<KickMaterialService> providesKickMaterialServiceProvider;

  private Provider<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>>
      provideDiscoverProvider;

  private ViewModelProvidersModule_ProjectListViewModelFactory projectListViewModelProvider;

  private ViewModelProvidersModule_SearchViewModelFactory searchViewModelProvider;

  private ViewModelProvidersModule_RewardListViewModelFactory rewardListViewModelProvider;

  private ViewModelProvidersModule_CategoriesListViewModelFactory categoriesListViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private ViewModelFactory_Factory viewModelFactoryProvider;

  private Provider<ViewModelProvider.Factory> viewModelFactoryProvider2;

  private Provider<ObservableCachedFieldWithArg<ProjectDetails, ProjectIdAndSignature>>
      provideProjectDetailsProvider;

  private AppModule_ProvidesPicassoCache$app_debugFactory providesPicassoCache$app_debugProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(4)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(
            ProjectDetailsActivity.class,
            (Provider) projectDetailsActivitySubcomponentBuilderProvider)
        .put(RewardsListActivity.class, (Provider) rewardsListActivitySubcomponentBuilderProvider)
        .put(
            CategoriesListActivity.class,
            (Provider) categoriesListActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Activity>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<MainActivityModule_MainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public MainActivityModule_MainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.projectDetailsActivitySubcomponentBuilderProvider =
        new Provider<
            MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent
                .Builder>() {
          @Override
          public MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent
                  .Builder
              get() {
            return new ProjectDetailsActivitySubcomponentBuilder();
          }
        };
    this.rewardsListActivitySubcomponentBuilderProvider =
        new Provider<
            MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent.Builder>() {
          @Override
          public MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent.Builder
              get() {
            return new RewardsListActivitySubcomponentBuilder();
          }
        };
    this.categoriesListActivitySubcomponentBuilderProvider =
        new Provider<
            MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent
                .Builder>() {
          @Override
          public MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent
                  .Builder
              get() {
            return new CategoriesListActivitySubcomponentBuilder();
          }
        };
    this.provideSharedPrefsProvider =
        SingleCheck.provider(AppModule_ProvideSharedPrefsFactory.create(builder.appModule));
    this.kickMaterialRequestInterceptorProvider =
        DoubleCheck.provider(KickMaterialRequestInterceptor_Factory.create());
    this.providesGson$app_debugProvider =
        AppModule_ProvidesGson$app_debugFactory.create(builder.appModule);
    this.providesKickMaterialServiceProvider =
        DoubleCheck.provider(
            AppModule_ProvidesKickMaterialServiceFactory.create(
                builder.appModule,
                kickMaterialRequestInterceptorProvider,
                providesGson$app_debugProvider));
    this.provideDiscoverProvider =
        DoubleCheck.provider(
            AppModule_ProvideDiscoverFactory.create(
                builder.appModule, providesKickMaterialServiceProvider));
    this.projectListViewModelProvider =
        ViewModelProvidersModule_ProjectListViewModelFactory.create(
            builder.viewModelProvidersModule, provideSharedPrefsProvider, provideDiscoverProvider);
    this.searchViewModelProvider =
        ViewModelProvidersModule_SearchViewModelFactory.create(
            builder.viewModelProvidersModule, provideDiscoverProvider);
    this.rewardListViewModelProvider =
        ViewModelProvidersModule_RewardListViewModelFactory.create(
            builder.viewModelProvidersModule);
    this.categoriesListViewModelProvider =
        ViewModelProvidersModule_CategoriesListViewModelFactory.create(
            builder.viewModelProvidersModule, provideDiscoverProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(4)
            .put(ProjectListViewModel.class, projectListViewModelProvider)
            .put(SearchViewModel.class, searchViewModelProvider)
            .put(RewardListViewModel.class, rewardListViewModelProvider)
            .put(CategoriesListViewModel.class, categoriesListViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider);
    this.viewModelFactoryProvider2 = DoubleCheck.provider((Provider) viewModelFactoryProvider);
    this.appModule = builder.appModule;
    this.provideProjectDetailsProvider =
        DoubleCheck.provider(
            AppModule_ProvideProjectDetailsFactory.create(
                builder.appModule, providesKickMaterialServiceProvider));
    this.providesPicassoCache$app_debugProvider =
        AppModule_ProvidesPicassoCache$app_debugFactory.create(builder.appModule);
  }

  @Override
  public void inject(KickMaterialApp app) {
    injectKickMaterialApp(app);
  }

  @Override
  public KickMaterialApp getApp() {
    return AppModule_ProvidesApp$app_debugFactory.proxyProvidesApp$app_debug(appModule);
  }

  @Override
  public ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery> getDiscoverField() {
    return provideDiscoverProvider.get();
  }

  @Override
  public int getAnimationDurationMultiplier() {
    return appModule.provideAnimationDurationMultiplier();
  }

  private KickMaterialApp injectKickMaterialApp(KickMaterialApp instance) {
    ActivityInjectorApp_MembersInjector.injectDispatchingActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    ActivityInjectorApp_MembersInjector.injectViewModelFactory(
        instance, viewModelFactoryProvider2.get());
    return instance;
  }

  public static final class Builder {
    private ViewModelProvidersModule viewModelProvidersModule;

    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (viewModelProvidersModule == null) {
        this.viewModelProvidersModule = new ViewModelProvidersModule();
      }
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder viewModelProvidersModule(ViewModelProvidersModule viewModelProvidersModule) {
      this.viewModelProvidersModule = Preconditions.checkNotNull(viewModelProvidersModule);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends MainActivityModule_MainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityModule_MainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements MainActivityModule_MainActivity.MainActivitySubcomponent {
    private Provider<
            ProjectsListFragmentsModule_ProjectsListFragment.ProjectsListFragmentSubcomponent
                .Builder>
        projectsListFragmentSubcomponentBuilderProvider;

    private Provider<
            ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent.Builder>
        searchListFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(2)
          .put(
              ProjectsListFragment.class,
              (Provider) projectsListFragmentSubcomponentBuilderProvider)
          .put(SearchListFragment.class, (Provider) searchListFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<? extends Fragment>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.projectsListFragmentSubcomponentBuilderProvider =
          new Provider<
              ProjectsListFragmentsModule_ProjectsListFragment.ProjectsListFragmentSubcomponent
                  .Builder>() {
            @Override
            public ProjectsListFragmentsModule_ProjectsListFragment.ProjectsListFragmentSubcomponent
                    .Builder
                get() {
              return new ProjectsListFragmentSubcomponentBuilder();
            }
          };
      this.searchListFragmentSubcomponentBuilderProvider =
          new Provider<
              ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent
                  .Builder>() {
            @Override
            public ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent
                    .Builder
                get() {
              return new SearchListFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class ProjectsListFragmentSubcomponentBuilder
        extends ProjectsListFragmentsModule_ProjectsListFragment.ProjectsListFragmentSubcomponent
            .Builder {
      private ProjectsListFragment seedInstance;

      @Override
      public ProjectsListFragmentsModule_ProjectsListFragment.ProjectsListFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ProjectsListFragment.class.getCanonicalName() + " must be set");
        }
        return new ProjectsListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ProjectsListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ProjectsListFragmentSubcomponentImpl
        implements ProjectsListFragmentsModule_ProjectsListFragment
            .ProjectsListFragmentSubcomponent {
      private ProjectsListFragmentSubcomponentImpl(
          ProjectsListFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(ProjectsListFragment arg0) {}
    }

    private final class SearchListFragmentSubcomponentBuilder
        extends ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent
            .Builder {
      private SearchListFragment seedInstance;

      @Override
      public ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SearchListFragment.class.getCanonicalName() + " must be set");
        }
        return new SearchListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SearchListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SearchListFragmentSubcomponentImpl
        implements ProjectsListFragmentsModule_SearchListFragment.SearchListFragmentSubcomponent {
      private SearchListFragmentSubcomponentImpl(SearchListFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SearchListFragment arg0) {}
    }
  }

  private final class ProjectDetailsActivitySubcomponentBuilder
      extends MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent.Builder {
    private ProjectDetailsActivity seedInstance;

    @Override
    public MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            ProjectDetailsActivity.class.getCanonicalName() + " must be set");
      }
      return new ProjectDetailsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ProjectDetailsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ProjectDetailsActivitySubcomponentImpl
      implements MainActivityModule_ProjectDetailsActivity.ProjectDetailsActivitySubcomponent {
    private Provider<ProjectDetailsTransitionHelperFactory>
        projectDetailsTransitionHelperFactoryProvider;

    private ProjectDetailsActivitySubcomponentImpl(
        ProjectDetailsActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProjectDetailsActivitySubcomponentBuilder builder) {
      this.projectDetailsTransitionHelperFactoryProvider =
          SingleCheck.provider(
              ProjectDetailsTransitionHelperFactory_Factory.create(
                  DaggerAppComponent.this.provideProjectDetailsProvider,
                  DaggerAppComponent.this.providesPicassoCache$app_debugProvider));
    }

    @Override
    public void inject(ProjectDetailsActivity arg0) {
      injectProjectDetailsActivity(arg0);
    }

    private ProjectDetailsActivity injectProjectDetailsActivity(ProjectDetailsActivity instance) {
      ProjectDetailsActivity_MembersInjector.injectTransitionHelperFactory(
          instance, projectDetailsTransitionHelperFactoryProvider.get());
      return instance;
    }
  }

  private final class RewardsListActivitySubcomponentBuilder
      extends MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent.Builder {
    private RewardsListActivity seedInstance;

    @Override
    public MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            RewardsListActivity.class.getCanonicalName() + " must be set");
      }
      return new RewardsListActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RewardsListActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RewardsListActivitySubcomponentImpl
      implements MainActivityModule_RewardsListActivity.RewardsListActivitySubcomponent {
    private RewardsListActivitySubcomponentImpl(RewardsListActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(RewardsListActivity arg0) {}
  }

  private final class CategoriesListActivitySubcomponentBuilder
      extends MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent.Builder {
    private CategoriesListActivity seedInstance;

    @Override
    public MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            CategoriesListActivity.class.getCanonicalName() + " must be set");
      }
      return new CategoriesListActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CategoriesListActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CategoriesListActivitySubcomponentImpl
      implements MainActivityModule_CategoriesListActivity.CategoriesListActivitySubcomponent {
    private CategoriesListActivitySubcomponentImpl(
        CategoriesListActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(CategoriesListActivity arg0) {}
  }
}
