// Generated by Dagger (https://google.github.io/dagger).
package com.byoutline.secretsauce.di;

import android.app.Activity;
import android.arch.lifecycle.ViewModelProvider;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class ActivityInjectorApp_MembersInjector
    implements MembersInjector<ActivityInjectorApp> {
  private final Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider;

  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  public ActivityInjectorApp_MembersInjector(
      Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    this.dispatchingActivityInjectorProvider = dispatchingActivityInjectorProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<ActivityInjectorApp> create(
      Provider<DispatchingAndroidInjector<Activity>> dispatchingActivityInjectorProvider,
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    return new ActivityInjectorApp_MembersInjector(
        dispatchingActivityInjectorProvider, viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(ActivityInjectorApp instance) {
    injectDispatchingActivityInjector(instance, dispatchingActivityInjectorProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  public static void injectDispatchingActivityInjector(
      ActivityInjectorApp instance,
      DispatchingAndroidInjector<Activity> dispatchingActivityInjector) {
    instance.dispatchingActivityInjector = dispatchingActivityInjector;
  }

  public static void injectViewModelFactory(
      ActivityInjectorApp instance, ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
