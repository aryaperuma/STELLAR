// Generated by Dagger (https://google.github.io/dagger).
package com.byoutline.kickmaterial.dagger;

import android.arch.lifecycle.ViewModel;
import android.content.SharedPreferences;
import com.byoutline.kickmaterial.model.DiscoverQuery;
import com.byoutline.kickmaterial.model.DiscoverResponse;
import com.byoutline.observablecachedfield.ObservableCachedFieldWithArg;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ViewModelProvidersModule_ProjectListViewModelFactory
    implements Factory<ViewModel> {
  private final ViewModelProvidersModule module;

  private final Provider<SharedPreferences> sharedPrefsProvider;

  private final Provider<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>>
      discoverFieldProvider;

  public ViewModelProvidersModule_ProjectListViewModelFactory(
      ViewModelProvidersModule module,
      Provider<SharedPreferences> sharedPrefsProvider,
      Provider<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>>
          discoverFieldProvider) {
    this.module = module;
    this.sharedPrefsProvider = sharedPrefsProvider;
    this.discoverFieldProvider = discoverFieldProvider;
  }

  @Override
  public ViewModel get() {
    return provideInstance(module, sharedPrefsProvider, discoverFieldProvider);
  }

  public static ViewModel provideInstance(
      ViewModelProvidersModule module,
      Provider<SharedPreferences> sharedPrefsProvider,
      Provider<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>>
          discoverFieldProvider) {
    return proxyProjectListViewModel(
        module, sharedPrefsProvider.get(), discoverFieldProvider.get());
  }

  public static ViewModelProvidersModule_ProjectListViewModelFactory create(
      ViewModelProvidersModule module,
      Provider<SharedPreferences> sharedPrefsProvider,
      Provider<ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery>>
          discoverFieldProvider) {
    return new ViewModelProvidersModule_ProjectListViewModelFactory(
        module, sharedPrefsProvider, discoverFieldProvider);
  }

  public static ViewModel proxyProjectListViewModel(
      ViewModelProvidersModule instance,
      SharedPreferences sharedPrefs,
      ObservableCachedFieldWithArg<DiscoverResponse, DiscoverQuery> discoverField) {
    return Preconditions.checkNotNull(
        instance.projectListViewModel(sharedPrefs, discoverField),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
